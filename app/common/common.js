var config = require('../../configs/config'),
	User   = require('../api/model'),
	dbConn = require('../../conns/dbConn'),
	jwt = require('jsonwebtoken');



var services = {
	getToken : function(user){
		return jwt.sign(user, config.secret , {
			expiresIn: 60*60*24
		});
	},
	
	checkExists : function(query,model){
		var OueryObj = global.dbQueryObj.collection(model);
		return new Promise(function(resolve,reject){
			OueryObj.find(query).toArray(function(err,result){
				if(err) throw err;
				if(result.length == 0) resolve(result[0]);
				else reject('Alerady Exists');
			});
		});
	},

	checkIfUserExists : function(username){
		var OueryObj = global.dbQueryObj.collection("User1");
		return new Promise(function(resolve,reject){
			var query = { username :  username };
			console.log('userController : query = '+ query);
			//Check if UserName exists 
			OueryObj.find(query).toArray(function(err,result){
				if(err) throw err;
				console.log('userController : result = '+ result.length);
				
				
				if(result.length > 0)
					resolve(result[0]);
				else
					reject('Authentication failed. User not found');
			});
		});
	},

	insertIntoDb : function(objToInsert,model){
		var OueryObj = global.dbQueryObj.collection(model);
		return new Promise(function(resolve,reject){
			OueryObj.insertOne(objToInsert, function(err, result) {
			    if (err) throw err;
			    console.log('userController : Promise1 resolved: result.insertedCount = '+ result.insertedCount);
			    if(result.insertedCount == 1)
			    	resolve('Inserted');
			    else
			    	reject(result);
				});
		});
	},

	ensureToken : function(req,res,next){
		const bearerHeader = req.headers["authorization"];
		if (typeof bearerHeader !== 'undefined') {
		  const bearer = bearerHeader.split(" ");
		  const bearerToken = bearer[1];
		  req.token = bearerToken;
		  next();
		} else {
		  res.sendStatus(403);
		}	
	},
	
	newContract : function(_contractName, _endTime, creatorArr){
		return new Promise(function(resolve,reject){
			console.log("Inside newContract method");
			if(global.web3 !== 'undefined'){
				console.log("web3 is not undefined, web3.eth.accounts[0] = "+ global.web3.eth.accounts[0]);
	
				var _ballotName = 'New Contract1' ;
				console.log("_ballotName : " + _ballotName);
				var _votingEndTime = 1234 ;
				console.log("_votingEndTime : " + _votingEndTime);
				var browser_ballot_sol_ballotContract = global.web3.eth.contract([{"constant":true,"inputs":[{"name":"_adharNumber","type":"string"}],"name":"validateBallotVoter","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getListOfParties","outputs":[{"name":"","type":"bytes32[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_adharNumber","type":"string"}],"name":"addVoter","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_partyId","type":"uint256"},{"name":"_partyName","type":"bytes32"}],"name":"addParty","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_partyId","type":"uint256"}],"name":"doVoting","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_partyId","type":"uint256"}],"name":"getTotalVoteCountOfParty","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_ballotName","type":"string"},{"name":"_votingEndTime","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"}]);
				console.log("After loading the abi, After creating ballot object");
				var browser_ballot_sol_ballot = browser_ballot_sol_ballotContract.new(
					_contractName,
					_endTime,
				   {
					 from: global.web3.eth.accounts[0], 
					 data: '0x6060604052341561000f57600080fd5b60405161094f38038061094f83398101604052808051820191906020018051906020019091905050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550816004908051906020019061008d92919061009c565b50806006819055505050610141565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106100dd57805160ff191683800117855561010b565b8280016001018555821561010b579182015b8281111561010a5782518255916020019190600101906100ef565b5b509050610118919061011c565b5090565b61013e91905b8082111561013a576000816000905550600101610122565b5090565b90565b6107ff806101506000396000f300606060405260043610610078576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680634d6a67811461007d578063814066b3146100f2578063aca848921461015c578063b1cf13bd146101d1578063e9511c6e14610219578063f41c705214610254575b600080fd5b341561008857600080fd5b6100d8600480803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509190505061028b565b604051808215151515815260200191505060405180910390f35b34156100fd57600080fd5b6101056103b3565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b8381101561014857808201518184015260208101905061012d565b505050509050019250505060405180910390f35b341561016757600080fd5b6101b7600480803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091905050610469565b604051808215151515815260200191505060405180910390f35b34156101dc57600080fd5b6101ff600480803590602001909190803560001916906020019091905050610604565b604051808215151515815260200191505060405180910390f35b341561022457600080fd5b61023a6004808035906020019091905050610674565b604051808215151515815260200191505060405180910390f35b341561025f57600080fd5b61027560048080359060200190919050506106c5565b6040518082815260200191505060405180910390f35b6000600115156003836040518082805190602001908083835b6020831015156102c957805182526020820191506020810190506020830392506102a4565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060020160009054906101000a900460ff16151514801561039b5750600015156003836040518082805190602001908083835b602083101515610353578051825260208201915060208101905060208303925061032e565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060000160009054906101000a900460ff161515145b156103a957600190506103ae565b600090505b919050565b6103bb6106ee565b6103c36106ee565b60006001805490506040518059106103d85750595b90808252806020026020018201604052509150600090505b600180549050811015610461576002600060018381548110151561041057fe5b906000526020600020900154815260200190815260200160002060010154828281518110151561043c57fe5b90602001906020020190600019169081600019168152505080806001019150506103f0565b819250505090565b6000806003836040518082805190602001908083835b6020831015156104a4578051825260208201915060208101905060208303925061047f565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060000160006101000a81548160ff021916908315150217905550816003836040518082805190602001908083835b60208310151561052a5780518252602082019150602081019050602083039250610505565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206001019080519060200190610573929190610702565b5060016003836040518082805190602001908083835b6020831015156105ae5780518252602082019150602081019050602083039250610589565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060020160006101000a81548160ff02191690831515021790555060019050919050565b60008160026000858152602001908152602001600020600101816000191690555060006002600085815260200190815260200160002060000181905550600180548060010182816106559190610782565b9160005260206000209001600085909190915055506001905092915050565b60008060008091506000905060026000858152602001908152602001600020600001549050600181016002600086815260200190815260200160002060000181905550600191508192505050919050565b600080600090506002600084815260200190815260200160002060000154905080915050919050565b602060405190810160405280600081525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061074357805160ff1916838001178555610771565b82800160010185558215610771579182015b82811115610770578251825591602001919060010190610755565b5b50905061077e91906107ae565b5090565b8154818355818115116107a9578183600052602060002091820191016107a891906107ae565b5b505050565b6107d091905b808211156107cc5760008160009055506001016107b4565b5090565b905600a165627a7a72305820091e55a925694bbf207059b498c576b2e52b3debc9af9b0af539bd21c8290c7c0029', 
					 gas: '4700000'
				   }, function (e, contract){
					console.log(contract.address);
					if (typeof contract.address !== 'undefined') {
						 console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);
						 resolve(contract.address);
					}
				 });
			}
		});
	},
	
}


module.exports = services;